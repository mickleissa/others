
###################### RDS ######################
module "rds_db_instance" {
  source = "../../modules/rds"

  subnet_groups                   = data.terraform_remote_state.vpc.outputs.private_subnet_ids
  rds_postgres_sg_id              = module.rds_security_group.security_group_id
  postgres_db_identifier          = "${terraform.workspace}-${var.rds_name}"
  postgres_username               = var.rds_credentials[terraform.workspace]["postgres_username"]
  postgres_password               = var.rds_credentials[terraform.workspace]["postgres_password"]
  postgres_dbname                 = var.rds_credentials[terraform.workspace]["postgres_dbname"]
  storage_size                    = var.storage_size[terraform.workspace]
  engine                          = var.engine[terraform.workspace]
  engine_version                  = var.engine_version[terraform.workspace]
  instance_class                  = var.rds_instance_class[terraform.workspace]
  tags                            = merge({ Name = "${terraform.workspace}-${var.project}-db-postgres" }, local.tags)
  manage_master_user_password     = true
  skip_final_snapshot             = var.skip_final_snapshot[terraform.workspace]
  storage_type                    = var.storage_type[terraform.workspace]
  encrypt_storage                 = var.encrypt_storage[terraform.workspace]
  apply_immediately               = var.apply_immediately[terraform.workspace]
  deletion_protection             = var.deletion_protection[terraform.workspace]
  auto_minor_version_upgrade      = var.auto_minor_version_upgrade[terraform.workspace]
  copy_tags_to_snapshot           = var.copy_tags_to_snapshot[terraform.workspace]
  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports
  parameter_group_family          = var.parameter_group_family[terraform.workspace]
}
module "rds_security_group" {
  source = "../../modules/security-groups"

  name          = "${terraform.workspace}-${var.project}-RDS"
  description   = "Allow access to RDS from EC2 "
  create_egress = false
  vpc_id        = data.terraform_remote_state.vpc.outputs.vpc_id
  tags          = merge({ Name = "${terraform.workspace}-${var.project}-RDS" }, local.tags)
  ingress_rules = [{
    description = "Allow 5432 port within the VPC"
    from_port   = 5432
    to_port     = 5432
    cidr_blocks = [data.terraform_remote_state.vpc.outputs.vpc_cidr]
  }]
}
####################################

variable "region" {
  type        = string
  description = "Region name"
}

variable "createdBy" {
  type        = string
  description = "Name Created"
}

variable "project" {
  type        = string
  description = "Project Name"
}

variable "account_id" {
  type        = map(string)
  description = "All environment account IDs"
}

variable "rds_name" {
  type        = string
  description = "Name for the RDS instance"
}

variable "rds_credentials" {
  type        = map(map(string))
  description = "Credentials for the RDS"
}

variable "engine" {
  type        = map(string)
  description = "Engine type for the RDS Instance"
}

variable "engine_version" {
  type        = map(string)
  description = "Version for RDS instance's engine"
}

variable "rds_instance_class" {
  type        = map(string)
  description = "Type of the RDS instance"
}

variable "skip_final_snapshot" {
  type        = map(bool)
  description = "Whether to skip to create snapshot while delete the database"
}

variable "storage_size" {
  type        = map(number)
  description = "Size of the DB storage"
}

variable "storage_type" {
  type        = map(string)
  description = "Type of the DB storage"
}

variable "encrypt_storage" {
  type        = map(bool)
  description = "Whether to encrypt storage or not"
}

variable "apply_immediately" {
  type        = map(bool)
  description = "Whether to Apply the changes on Database immediately or not"
}

variable "deletion_protection" {
  type        = map(bool)
  description = "Whether to Deletetion protection for the database should be enabled or not"
}

variable "auto_minor_version_upgrade" {
  type        = map(bool)
  description = "Whether to automatically upgrade the minor version or not"
}

variable "copy_tags_to_snapshot" {
  type        = map(bool)
  description = "Whether to copy the tags to the snapshots created from the database or not"
}

variable "enabled_cloudwatch_logs_exports" {
  type        = list(string)
  description = "List of values to mention which logs needs to store"
  default     = ["postgresql"]
}

variable "parameter_group_family" {
  type        = map(string)
  description = "Parameter group family"
}

##########################################################################
#######################################################################
# RDS Subnet Group module
resource "aws_db_subnet_group" "this" {
  name       = lower(var.tags["Name"])
  subnet_ids = var.subnet_groups # replace with your private subnet IDs
  tags       = var.tags
}

resource "aws_db_instance" "this" {
  allocated_storage               = var.storage_size
  multi_az                        = var.enable_multi_az
  storage_type                    = var.storage_type
  engine                          = var.engine
  engine_version                  = var.engine_version
  instance_class                  = var.instance_class
  identifier                      = var.postgres_db_identifier
  username                        = var.postgres_username
  vpc_security_group_ids          = [var.rds_postgres_sg_id]
  db_subnet_group_name            = aws_db_subnet_group.this.name
  db_name                         = var.postgres_dbname
  skip_final_snapshot             = var.skip_final_snapshot
  apply_immediately               = var.apply_immediately
  backup_retention_period         = var.backup_retention_period
  deletion_protection             = var.deletion_protection
  tags                            = var.tags
  manage_master_user_password     = var.manage_master_user_password
  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports
  storage_encrypted               = var.encrypt_storage
  auto_minor_version_upgrade      = var.auto_minor_version_upgrade
  copy_tags_to_snapshot           = var.copy_tags_to_snapshot
  # password                    = var.manage_master_user_password ? null : var.postgres_password
  #checkov:skip=CKV_AWS_353:Ensure that RDS instances have performance insights enabled
  #checkov:skip=CKV_AWS_354:RDS Performance Insights are not encrypted using KMS CMKs
  #checkov:skip=CKV_AWS_118:Ensure that enhanced monitoring is enabled for Amazon RDS instances
  #checkov:skip=CKV_AWS_157:RDS instances do not have Multi-AZ enabled
  #checkov:skip=CKV2_AWS_30:Ensure Postgres RDS as aws_db_instance has Query Logging enabled
  #checkov:skip=CKV_AWS_129:Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled
}

# PARAMETER GROUP
resource "aws_db_parameter_group" "this" {
  name   = lower(var.tags["Name"])
  family = var.parameter_group_family
  tags   = var.tags

  dynamic "parameter" {
    for_each = var.db_parameters != null ? var.db_parameters : {}
    content {
      name         = parameter.key
      value        = parameter.value
      apply_method = var.parameter_apply_method
    }
  }

  lifecycle {
    create_before_destroy = true
  }
}

############################################
variable "subnet_groups" {
  type        = list(string)
  description = "List of Private Subnet IDs for RDS"
}

variable "rds_postgres_sg_id" {
  type        = string
  description = "Security Group ID for RDS"
}

variable "postgres_db_identifier" {
  type        = string
  description = "RDS Instance Name"
}

variable "postgres_username" {
  type        = string
  description = "Postgres user Name"
}

variable "postgres_password" {
  type        = string
  description = "Postgres User Password"
}

variable "postgres_dbname" {
  type        = string
  description = "Postgres Database name"
}

variable "storage_size" {
  type        = number
  description = "Storage size of the RDS instance"
}

variable "engine" {
  type        = string
  description = "Type of the RDS Engine"
}

variable "engine_version" {
  type        = string
  description = "Version of the RDS Engine"
}

variable "instance_class" {
  type        = string
  description = "Type of the RDS instance"
}

variable "enable_multi_az" {
  type        = bool
  description = "Specifies if the RDS instance is Multi-AZ."
  default     = false
}

variable "tags" {
  type        = map(string)
  description = "Tags for your infrastructure"
  default     = {}
}

variable "backup_retention_period" {
  type        = number
  description = "Number of days to retention the Backup"
  default     = 1
}

variable "manage_master_user_password" {
  type        = bool
  description = "Whether to manage RDS master password using AWS Secrets manager"
  default     = true
}

variable "skip_final_snapshot" {
  type        = bool
  description = "Whether to skip to create snapshot while delete the database"
  default     = true
}

variable "storage_type" {
  type        = string
  description = "Type of the DB storage"
  default     = "gp2"
}

variable "encrypt_storage" {
  type        = bool
  description = "Whether to encrypt storage or not"
  default     = true
}

variable "apply_immediately" {
  type        = bool
  description = "Whether to Apply the changes on Database immediately or not"
  default     = true
}

variable "deletion_protection" {
  type        = bool
  description = "Whether to Deletetion protection for the database should be enabled or not"
  default     = true
}

variable "auto_minor_version_upgrade" {
  type        = bool
  description = "Whether to automatically upgrade the minor version or not"
  default     = true
}

variable "copy_tags_to_snapshot" {
  type        = bool
  description = "Whether to copy the tags to the snapshots created from the database or not"
  default     = true
}

variable "enabled_cloudwatch_logs_exports" {
  type        = list(string)
  description = "List of values to mention which logs needs to store"
  default     = ["postgresql"]
}

variable "parameter_apply_method" {
  type        = string
  description = "immediate (default), or pending-reboot"
  default     = "immediate"
}

variable "parameter_group_family" {
  type        = string
  description = "Parameter group family"
  default     = null
}

variable "db_parameters" {
  type        = map(any)
  description = "Parameters for db parameter group"
  default     = null
}
