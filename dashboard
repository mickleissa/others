#!/bin/bash

# Define your variables
region="$1"
cluster_name="$2"
project_env="$3"
module_name="$4"
task_def_arn="$5"

# Function to print the dashboard header
print_header() {
    clear
    echo "--------------------------------------------------------------------------------------------------"
    echo "                                ECS Deployment Dashboard                                          "
    echo "--------------------------------------------------------------------------------------------------"
    echo "| Time                  | Service Name                     | Status       | Task ARN                                      |"
    echo "--------------------------------------------------------------------------------------------------"
}

# Function to print a deployment status line
print_status() {
    local time="$1"
    local service_name="$2"
    local status="$3"
    local task_arn="$4"

    printf "| %-21s | %-30s | %-12s | %-44s |\n" "$time" "$service_name" "$status" "$task_arn"
    echo "--------------------------------------------------------------------------------------------------"
}

# Update the ECS service
update_service_output=$(aws --region "$region" ecs update-service \
    --cluster "$cluster_name" \
    --service "${project_env}-${module_name}-service" \
    --task-definition "$task_def_arn")

if [ $? -ne 0 ]; then
    echo "$(date +'%Y-%m-%d %H:%M:%S') - ERROR: Failed to update ECS service"
    exit 1
fi

# Log the update service output
echo "$(date +'%Y-%m-%d %H:%M:%S') - INFO: Update Service Output: $update_service_output"

# Wait until the service is deployed, rolled back, or running for more than 5 minutes
start_time=$(date +%s)
timeout=300  # 5 minutes in seconds

print_header

while true; do
    # Get the current status of the service
    service_description=$(aws --region "$region" ecs describe-services \
        --cluster "$cluster_name" \
        --services "${project_env}-${module_name}-service" \
        --query 'services[0]' \
        --output json)

    # Extract deployment details
    service_status=$(echo $service_description | jq -r '.deployments[0].status')
    task_arns=$(echo $service_description | jq -r '.deployments[0].taskSets[0].taskSetArn')
    current_time=$(date +'%Y-%m-%d %H:%M:%S')

    # Retrieve logs from CloudWatch for each task
    for task_arn in $task_arns; do
        log_streams=$(aws logs describe-log-streams --log-group-name "/ecs/${project_env}-${module_name}-service" --query "logStreams[?logStreamName.contains(@, '${task_arn}')].logStreamName" --output text)

        echo "[$current_time] - INFO: Logs for Task ARN: $task_arn"

        for log_stream in $log_streams; do
            aws logs get-log-events --log-group-name "/ecs/${project_env}-${module_name}-service" --log-stream-name "$log_stream" --limit 5 --query 'events[*].message' --output text
        done

        # Print the status
        print_status "$current_time" "${project_env}-${module_name}-service" "$service_status" "$task_arn"
    done

    # Check the time elapsed
    current_timestamp=$(date +%s)
    elapsed_time=$((current_timestamp - start_time))

    # Check if the service is successfully deployed, rolled back, or if it exceeds the timeout
    if [ "$service_status" == "PRIMARY" ]; then
        echo "[$current_time] - INFO: Deployment succeeded"
        exit 0
    elif [ "$service_status" == "FAILED" ]; then
        echo "[$current_time] - ERROR: Deployment failed"
        exit 1
    elif [ "$service_status" == "ROLLED_BACK" ]; then
        echo "[$current_time] - ERROR: The task was not deployed and rolled back to the previous task"
        exit 1
    elif [ "$elapsed_time" -gt "$timeout" ]; then
        echo "[$current_time] - ERROR: Deployment in progress for more than 5 minutes"
        exit 1
    else
        echo "[$current_time] - INFO: Waiting for deployment to complete. Current status: $service_status"
    fi

    # Wait for a few seconds before checking again
    sleep 10
done
