provider "aws" {
  region = "us-east-1"
}

# Setup VPC
resource "aws_vpc" "dev_proj_1_vpc_us_east_1" {
  cidr_block = var.vpc_cidr
  tags = {
    Name = var.vpc_name
  }
}

# Setup public subnet
resource "aws_subnet" "dev_proj_1_public_subnets" {
  count             = length(var.cidr_public_subnet)
  vpc_id            = aws_vpc.dev_proj_1_vpc_us_east_1.id
  cidr_block        = element(var.cidr_public_subnet, count.index)
  availability_zone = element(var.us_availability_zone, count.index)

  tags = {
    Name = "dev-proj-public-subnet-${count.index + 1}"
  }
}

# Setup private subnet
resource "aws_subnet" "dev_proj_1_private_subnets" {
  count             = length(var.cidr_private_subnet)
  vpc_id            = aws_vpc.dev_proj_1_vpc_us_east_1.id
  cidr_block        = element(var.cidr_private_subnet, count.index)
  availability_zone = element(var.us_availability_zone, count.index)

  tags = {
    Name = "dev-proj-private-subnet-${count.index + 1}"
  }
}

# Setup Internet Gateway
resource "aws_internet_gateway" "dev_proj_1_public_internet_gateway" {
  vpc_id = aws_vpc.dev_proj_1_vpc_us_east_1.id
  tags = {
    Name = "dev-proj-1-igw"
  }
}

# Public Route Table
resource "aws_route_table" "dev_proj_1_public_route_table" {
  vpc_id = aws_vpc.dev_proj_1_vpc_us_east_1.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.dev_proj_1_public_internet_gateway.id
  }
  tags = {
    Name = "dev-proj-1-public-rt"
  }
}

# Public Route Table and Public Subnet Association
resource "aws_route_table_association" "dev_proj_1_public_rt_subnet_association" {
  count          = length(aws_subnet.dev_proj_1_public_subnets)
  subnet_id      = aws_subnet.dev_proj_1_public_subnets[count.index].id
  route_table_id = aws_route_table.dev_proj_1_public_route_table.id
}

# Setup Elastic IP for NAT Gateway
resource "aws_eip" "dev_proj_1_nat_eip" {
  vpc = true

  tags = {
    Name = "dev-proj-1-nat-eip"
  }
}

# Setup NAT Gateway
resource "aws_nat_gateway" "dev_proj_1_nat_gateway" {
  allocation_id = aws_eip.dev_proj_1_nat_eip.id
  subnet_id     = aws_subnet.dev_proj_1_public_subnets[0].id

  tags = {
    Name = "dev-proj-1-nat-gateway"
  }
}

# Private Route Table
resource "aws_route_table" "dev_proj_1_private_route_table" {
  vpc_id = aws_vpc.dev_proj_1_vpc_us_east_1.id
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.dev_proj_1_nat_gateway.id
  }
  tags = {
    Name = "dev-proj-1-private-rt"
  }
}

# Private Route Table and Private Subnet Association
resource "aws_route_table_association" "dev_proj_1_private_rt_subnet_association" {
  count          = length(aws_subnet.dev_proj_1_private_subnets)
  subnet_id      = aws_subnet.dev_proj_1_private_subnets[count.index].id
  route_table_id = aws_route_table.dev_proj_1_private_route_table.id
}

# Setup Network Interface
resource "aws_network_interface" "dev_proj_1_network_interface" {
  count       = length(var.cidr_public_subnet)
  subnet_id   = aws_subnet.dev_proj_1_public_subnets[count.index].id
  description = "Network interface for dev-proj-${count.index + 1}"

  tags = {
    Name = "dev-proj-${count.index + 1}-ni"
  }
}

# Create multiple target groups with target_type = "ip"
resource "aws_lb_target_group" "dev_proj_1_lb_target_group" {
  count = length(var.lb_target_groups)
  name     = var.lb_target_groups[count.index].name
  port     = var.lb_target_groups[count.index].port
  protocol = var.lb_target_groups[count.index].protocol
  vpc_id   = var.lb_target_groups[count.index].vpc_id

  target_type = "ip"  # Specify that the target type is IP

  health_check {
    path                 = var.lb_target_groups[count.index].path
    port                 = var.lb_target_groups[count.index].port
    healthy_threshold    = 6
    unhealthy_threshold  = 2
    timeout              = 2
    interval             = 5
    matcher              = "200"  # has to be HTTP 200 or fails
  }
}

# Attach multiple IP addresses to each target group
resource "aws_lb_target_group_attachment" "dev_proj_1_lb_target_group_attachment" {
  count = length(var.target_ips)
  target_group_arn = element(aws_lb_target_group.dev_proj_1_lb_target_group.*.arn, count.index % length(var.lb_target_groups))
  target_id        = var.target_ips[count.index]
  port             = 8080
}
