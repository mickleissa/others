
trigger:
  branches:
    include:
    - tf-workspace
  paths:
    include:
    - ./workspace/*

pool:
   name: Default

parameters:
- name: "Region"
  default: 'us-west-2'
  values:
  - 'us-west-2'
  - 'us-east-1'
- name: "Environment"
  default: 'dev'
  values:
  - 'dev'
  - 'qa'
  - 'prod'

variables:
- group: terraform_infra

- name: "BucketName"
  value: 'terraform-backend-2024-omusleh'
- name: BucketRegion
  value: 'us-west-2'
- name: "ResourceType"
  value: 'vpc'
- name: "tflintVersion"
  value: "0.53.0"
- name: awsAccessKeyId
  value: $(AWS_ACCESS_KEY_ID)
- name: awsSecretAccessKey
  value: $(AWS_SECRET_ACCESS_KEY)

stages:
  - stage: Terraform_Lint
    jobs: 
      - job: Terraform_Lint
        continueOnError:  false
        steps: 
          - task: TerraformInstaller@1
            displayName: 'Terraform : install'
            inputs:
              terraformVersion: 'latest'
        # Terraform init task
          - task: TerraformTaskV4@4
            displayName: 'Terraform : Init'
            inputs:
              provider: 'aws'
              command: 'init'
              commandOptions: '--reconfigure'
              backendServiceAWS: 'Terraform'
              backendAWSBucketName: $(BucketName)
              backendAWSKey: ${{ parameters.Region }}/$(ResourceType)/terraform.tfstate
              workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
          # Terraform Workspace
          - script: |
              terraform workspace new ${{ parameters.Environment }} || terraform workspace select ${{ parameters.Environment }}
            displayName: 'Terraform : Workspace'
            env:
              AWS_ACCESS_KEY_ID: $(awsAccessKeyId)
              AWS_SECRET_ACCESS_KEY: $(awsSecretAccessKey)
              AWS_DEFAULT_REGION: $(BucketRegion)
            workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
          - task: Bash@3
            displayName: 'Terraform: Validate'
            inputs:
              targetType: 'inline'
              script: |
                curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
                tflint --init --config ./.tflint.hcl
                tflint
              workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
  - stage: Terraform_Checkov 
    condition: succeeded('Terraform_Lint')
    dependsOn: Terraform_Lint
    jobs: 
      - job: Terraform_Checkov 
        continueOnError:  false
        steps: 
          - task: Bash@3
            displayName: 'Terraform: Checkov'
            inputs:
              targetType: 'inline'
              script: |
                echo "Running Checkov scan"
                /home/ubuntu/.local/bin/checkov -d .
              workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'

# Second Stage Terraform Plan 
  - stage: Terraform_Plan
    condition: succeeded('Terraform_Checkov')
    dependsOn: Terraform_Checkov
    jobs:
      - job: Plan
        steps:
          - task: TerraformInstaller@1
            displayName: 'Terraform : install'
            inputs:
              terraformVersion: 'latest'
        # Terraform init task
          - task: TerraformTaskV4@4
            displayName: 'Terraform : Init'
            inputs:
              provider: 'aws'
              command: 'init'
              commandOptions: '--reconfigure'
              backendServiceAWS: 'Terraform'
              backendAWSBucketName: $(BucketName)
              backendAWSKey: ${{ parameters.Region }}/$(ResourceType)/terraform.tfstate
              workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
          # Terraform Workspace
          - script: |
              terraform workspace new ${{ parameters.Environment }} || terraform workspace select ${{ parameters.Environment }}
            displayName: 'Terraform : Workspace'
            env:
              AWS_ACCESS_KEY_ID: $(awsAccessKeyId)
              AWS_SECRET_ACCESS_KEY: $(awsSecretAccessKey)
              AWS_DEFAULT_REGION: $(BucketRegion)
            workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
        # Terraform Plan task
          - task: TerraformTaskV4@4
            displayName: 'Terraform : Plan'
            inputs:
              provider: 'aws'
              command: 'plan'
              commandOptions: |
                -var "region=${{ parameters.Region }}"
              environmentServiceNameAWS: 'Terraform'
              workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'

  # Third Stage Terraform Apply 
  - stage: Terraform_Apply
    condition: succeeded('Terraform_Plan')
    dependsOn: Terraform_Plan
    jobs:

    # Apply Approval
    - job: apply_approval
      displayName: "Apply Approval"
      pool: server
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 30
        inputs:
          instructions: "Hi, please validate the Terraform Plan and Resume the Apply"
          onTimeout: 'reject'

    - job: Apply
      dependsOn: apply_approval
      condition: succeeded('apply_approval')
      steps:
        - task: TerraformInstaller@1
          displayName: 'Terraform : install'
          inputs:
            terraformVersion: 'latest'
      # Terraform init task
        - task: TerraformTaskV4@4
          displayName: 'Terraform : Init'
          inputs:
            provider: 'aws'
            command: 'init'
            commandOptions: '--reconfigure'
            backendServiceAWS: 'Terraform'
            backendAWSBucketName: $(BucketName)
            backendAWSKey: ${{ parameters.Region }}/$(ResourceType)/terraform.tfstate
            workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
        # Terraform Workspace
        - script: |
            terraform workspace new ${{ parameters.Environment }} || terraform workspace select ${{ parameters.Environment }}
          displayName: 'Terraform : Workspace'
          env:
            AWS_ACCESS_KEY_ID: $(awsAccessKeyId)
            AWS_SECRET_ACCESS_KEY: $(awsSecretAccessKey)
            AWS_DEFAULT_REGION: $(BucketRegion)
          workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
      # Terraform Apply task
        - task: TerraformTaskV4@4
          displayName: 'Terraform : Apply'
          inputs:
            provider: 'aws'
            command: 'apply'
            commandOptions: |
              -var "region=${{ parameters.Region }}"
            environmentServiceNameAWS: 'Terraform'
            backendAWSBucketName: $(BucketName)
            backendAWSKey: ${{ parameters.Region }}/$(ResourceType)/terraform.tfstate
            workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'

  - stage: Terraform_Destroy
    condition: succeeded('Terraform_Plan')
    dependsOn: Terraform_Plan
    jobs:

    # Destroy Approval
    - job: destroy_approval
      displayName: "Destroy Approval"
      pool: server
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 30
        inputs:
          instructions: "Hi, please validate the Terraform Plan and Resume the Destroy"
          onTimeout: 'reject'

    - job: Destroy
      dependsOn: destroy_approval
      condition: succeeded('destroy_approval')
      steps:
      - task: TerraformInstaller@1
        displayName: 'Terraform : install'
        inputs:
          terraformVersion: 'latest'
    # Terraform init task
      - task: TerraformTaskV4@4
        displayName: 'Terraform : Init'
        inputs:
          provider: 'aws'
          command: 'init'
          commandOptions: '--reconfigure'
          backendServiceAWS: 'Terraform'
          backendAWSBucketName: $(BucketName)
          backendAWSKey: ${{ parameters.Region }}/$(ResourceType)/terraform.tfstate
          workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
      # Terraform Workspace
      - script: |
          terraform workspace new ${{ parameters.Environment }} || terraform workspace select ${{ parameters.Environment }}
        displayName: 'Terraform : Workspace'
        env:
          AWS_ACCESS_KEY_ID: $(awsAccessKeyId)
          AWS_SECRET_ACCESS_KEY: $(awsSecretAccessKey)
          AWS_DEFAULT_REGION: $(BucketRegion)
        workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
      - task: TerraformTaskV4@4
        displayName: 'Terraform : Destroy'
        inputs:
          provider: 'aws'
          command: 'destroy'
          commandOptions: |
            -var "region=${{ parameters.Region }}"
          environmentServiceNameAWS: 'Terraform' 
          backendAWSBucketName: $(BucketName)
          backendAWSKey: ${{ parameters.Region }}/$(ResourceType)/terraform.tfstate
          workingDirectory: '$(System.DefaultworkingDirectory)/workspace/$(ResourceType)'
